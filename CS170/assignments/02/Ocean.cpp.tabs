/******************************************************************************/
/*!
\file   Ocean.cpp
\author Marcus Meng
\par    email: marcus.meng\@digipen.edu
\par    DigiPen login: marcus.meng
\par    Course: CS170
\par    Assignment #02
\date   February 10, 2010
\brief
  Implements functions required to adjust and track data in the "Ocean" that
  the WarBoats game uses.

Hours spent on this assignment: 1

Specific portions that gave you the most trouble:
  None.

*/
/******************************************************************************/

#include "WarBoats.h"
#include "Ocean.h"

namespace CS170
{

namespace WarBoats
{
  
  /*
   * ALL STUDENT IMPLEMENTATION GOES HERE
  */
  /******************************************************************************/
    /*!
      \brief
        Initializes a new Ocean object.
      
      \param num_boats
        The number of boats this Ocean is meant to contain.
      
      \param x_quadrants
        How big the grid should be horizontally.
      
      \param y_quadrants
        How big the grid should be vertically.
    */
    /******************************************************************************/
	Ocean::Ocean(int num_boats, int x_quadrants, int y_quadrants)
	{
		grid_ = new int[x_quadrants * y_quadrants];
		x_quadrants_ = x_quadrants;
		y_quadrants_ = y_quadrants;
		boats_ = new Boat[num_boats];
		num_boats_ = num_boats;

		stats_.hits = 0;
		stats_.misses = 0;
		stats_.duplicates = 0;
		stats_.sunk = 0;
	}

    /******************************************************************************/
    /*!
      \brief
        Deallocates the specified Ocean struct and all members inside it.
    */
    /******************************************************************************/
	Ocean::~Ocean(void)
	{
		delete[] grid_;
		delete[] boats_;
	}

    /******************************************************************************/
    /*!
      \brief
        Gets the ShotStats struct containing information about how many shots and
        the results of the shots fired so far.
      
      \return
        A struct containing hit/miss/illegal/duplicate shot information.
    */
    /******************************************************************************/
	ShotStats Ocean::GetShotStats(void) const
	{
	  return(stats_);
	}

    /******************************************************************************/
    /*!
      \brief
        Checks whether a shot is valid at the coordinates specified, and if so,
        handles it as appropriate.
      
      \param coordinate
        Where the shot hits in the Ocean.
      
      \return
        srILLEGAL if the shot is out of bounds, srDUPLICATE if the shot is fired
        at a position that already has been fired at, srMISS if the shot does not
        hit a ship, srHIT if the shot hits a ship but fails to sink it, and
        srSUNK otherwise.
    */
    /******************************************************************************/
	ShotResult Ocean::TakeShot(const Point &coordinate)
	{
	    // Check edges.
	    if (coordinate.x < 0 || coordinate.x > x_quadrants_
		|| coordinate.y < 0 || coordinate.y > y_quadrants_)
	    {
		    return(srILLEGAL);
	    }

	    // Get the value for easy access.
	    int gridvalue = *get_grid_value(coordinate.x, coordinate.y);

	    // Miss test.
	    if (gridvalue == 0)
	    {
		    stats_.misses++;
		    *get_grid_value(coordinate.x,
				    coordinate.y) = -1;
		    return(srMISS);
	    }

	    // Duplicate test.
	    if (gridvalue == -1 || gridvalue > HIT_OFFSET)
	    {
		    stats_.duplicates++;
		    return(srDUPLICATE);
	    }

	    // If we're still here, it must've been a hit. Is it sunk?
	    stats_.hits++;
            boats_[gridvalue].hits++;
	    *get_grid_value(coordinate.x, coordinate.y) += HIT_OFFSET;

	    if (boats_[gridvalue].hits >= BOAT_LENGTH)
	    {
		    stats_.sunk++;
		    return(srSUNK);
	    }


	    return(srHIT);
	}
	
    /******************************************************************************/
    /*!
      \brief
        Places a given boat into the Ocean. The boat is only placed if it can be
        fitted into a valid location.
      
      \param boat
        The boat with the data that is to be inserted.
        
      \return
        bpREJECTED if there is an issue with the placement, bpACCEPTED otherwise.
    */
    /******************************************************************************/
	BoatPlacement Ocean::PlaceBoat(const Boat &boat)
	{
	  // Perform edge checks.
	    if (boat.position.x < 0 || boat.position.x > x_quadrants_
		|| boat.position.y < 0 || boat.position.y > y_quadrants_)
	    {
		    return(bpREJECTED);
	    }

	    if ((boat.orientation == oHORIZONTAL &&
		((boat.position.x + BOAT_LENGTH) > x_quadrants_)))
	    {
		    return(bpREJECTED);
	    }
	    if ((boat.orientation == oVERTICAL &&
		((boat.position.y + BOAT_LENGTH) > y_quadrants_)))
	    {
		    return(bpREJECTED);
	    }

	    // Perform overlap checks.
	    if (boat.orientation == oHORIZONTAL)
	    {
		    for (int i = 0; i < BOAT_LENGTH; i++)
		    {
			    if (*get_grid_value(boat.position.x + i,
				boat.position.y) != 0)
			    {
				    return(bpREJECTED);
			    }
		    }
	    }
	    else
	    {
		    for (int i = 0; i < BOAT_LENGTH; i++)
		    {
			    if (*get_grid_value(boat.position.x,
				boat.position.y + i) != 0)
			    {
				    return(bpREJECTED);
			    }
		    }
	    }

	    // All clear if it got here.
	    if (boat.orientation == oHORIZONTAL)
	    {
		    for (int i = 0; i < BOAT_LENGTH; i++)
		    {
			    *get_grid_value(boat.position.x + i,
				boat.position.y) = boat.ID;
		    }
	    }
	    else
	    {
		    for (int i = 0; i < BOAT_LENGTH; i++)
		    {
			    *get_grid_value(boat.position.x,
				boat.position.y + i) = boat.ID;
		    }
	    }

	    boats_[boat.ID].hits = 0;

	    return(bpACCEPTED);
	}

  /******************************************************************************/
  /*!
    \brief
      A simple function to help consistently get the value out of the grid.
      
    \param x
      x coordinates of the value to grab.
        
    \param y
      y coordinates of the value to grab.

    \return
      A pointer to the location on the grid.
  */
  /******************************************************************************/
	inline int* Ocean::get_grid_value(const int& x, const int& y)
	{
		return(&grid_[y * x_quadrants_ + x]);
	}

  /******************************************************************************/
  /*!
    \brief
      Retrieves a pointer to the grid.

    \return
      A pointer to the the grid.
  */
  /******************************************************************************/
  const int *Ocean::GetGrid(void) const
  {
    return grid_;
  }

  /******************************************************************************/
  /*!
    \brief
      Retrieves the horizontal and vertical size of the grid.

    \return
      A Point containing the x and y lengths of the grid.
  */
  /******************************************************************************/
  Point Ocean::GetDimensions(void) const
  {
    Point pt = {x_quadrants_, y_quadrants_};
    return pt;
  }

} // namespace WarBoats

} // namespace CS170

