namespace CS170
{

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// static members

template <typename T>
int List<T>::Node::node_count_ = 0;

template <typename T>
int List<T>::node_count(void)
{
  return Node::node_count_;
}

/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// List::Node methods
template <typename T>
List<T>::Node::Node(T value) : data(value)
{
  node_count_++;
}

template <typename T>
List<T>::Node::~Node(void)
{
  node_count_--;
}


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// public methods

/////////////////////////////////////////////////////////////////////////
// Function: List::clear
//  Purpose: Removes all of the nodes in the list.
//   Inputs: None
//  Outputs: None
/////////////////////////////////////////////////////////////////////////
template <typename T>
void List<T>::clear(void)
{
  while (!empty())
    pop_front();
}


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// private methods

/////////////////////////////////////////////////////////////////////////
// Function: new_node
//  Purpose: Allocate a node, initialize the data and next pointer
//   Inputs: data - the data to put in the node
//  Outputs: A pointer to the node
/////////////////////////////////////////////////////////////////////////
template <typename T>
typename List<T>::Node *List<T>::new_node(const T& data) const
{
  Node *node = new Node(data); // create the node
  node->next = 0;              // no next pointer yet
  return node;
}

} // namespace CS170


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// non-members

#include <iomanip>

/////////////////////////////////////////////////////////////////////////
// Function: operator<<
//  Purpose: Output the list into an ostream object
//   Inputs:   os - ostream object to output to
//           list - the List to output
//  Outputs: The ostream object that was passed in.
/////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream &CS170::operator<<(std::ostream & os, const CS170::List<T> &list)
{
    // Start at the top
  typename CS170::List<T>::Node *pnode = list.head_;

    // Print each item
  while (pnode != 0)
  {
    os << std::setw(4) << pnode->data;
    pnode = pnode->next;
  }
  os << std::endl;
  return os;
}

