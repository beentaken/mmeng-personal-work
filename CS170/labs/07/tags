!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddToEnd	List.cpp	/^void List::AddToEnd(int value)$/;"	f	class:List
AddToEnd	List.cpp	/^void List::AddToEnd(struct Node **ppList, int value)$/;"	f	class:List
AddToFront	List.cpp	/^void List::AddToFront(int value)$/;"	f	class:List
AddToFront	List.cpp	/^void List::AddToFront(struct Node **ppList, int value)$/;"	f	class:List
Concat	List.cpp	/^void List::Concat(const List &toConcat)$/;"	f	class:List
Concat	List.cpp	/^void List::Concat(struct Node **Destination, struct Node *Source)$/;"	f	class:List
Count	List.cpp	/^int List::Count(void)$/;"	f	class:List
Delete	List.cpp	/^void List::Delete(List &toDelete)$/;"	f	class:List
Delete	List.cpp	/^void List::Delete(int value)$/;"	f	class:List
Delete	List.cpp	/^void List::Delete(struct Node **ppList, int value)$/;"	f	class:List
Delete	List.cpp	/^void List::Delete(struct Node **ppList, struct Node *Items)$/;"	f	class:List
FindItem	List.cpp	/^struct Node *List::FindItem(int value)$/;"	f	class:List
FindItem	List.cpp	/^struct Node *List::FindItem(struct Node *list, int value)$/;"	f	class:List
FreeList	List.cpp	/^void List::FreeList(struct Node *pList)$/;"	f	class:List
Insert	List.cpp	/^void List::Insert(int value)$/;"	f	class:List
Insert	List.cpp	/^void List::Insert(int value, int position)$/;"	f	class:List
Insert	List.cpp	/^void List::Insert(struct Node **ppList, int value)$/;"	f	class:List
Insert	List.cpp	/^void List::Insert(struct Node **ppList, int value, int position)$/;"	f	class:List
LIST_H	List.h	3;"	d
List	List.cpp	/^List::List(void)$/;"	f	class:List
List	List.h	/^class List$/;"	c
MakeNode	List.cpp	/^Node* List::MakeNode(int value)$/;"	f	class:List
Merge	List.cpp	/^void List::Merge(List &rhs)$/;"	f	class:List
Merge	List.cpp	/^void List::Merge(Node** ppList, Node** toAdd)$/;"	f	class:List
Node	List.cpp	/^Node::Node(int value)$/;"	f	class:Node
Node	List.h	/^struct Node$/;"	s
TestInsert2	main.cpp	/^void TestInsert2(void)$/;"	f
TestMerge	main.cpp	/^void TestMerge(const int numbers1[], const int numbers2[], int size1, int size2)$/;"	f
TestMerge1	main.cpp	/^void TestMerge1(void)$/;"	f
TestMerge2	main.cpp	/^void TestMerge2(void)$/;"	f
TestMerge3	main.cpp	/^void TestMerge3(void)$/;"	f
TestMerge4	main.cpp	/^void TestMerge4(void)$/;"	f
TestMerge5	main.cpp	/^void TestMerge5(void)$/;"	f
TestMerge6	main.cpp	/^void TestMerge6(void)$/;"	f
TestMerge7	main.cpp	/^void TestMerge7(void)$/;"	f
TestMerge8	main.cpp	/^void TestMerge8(void)$/;"	f
head_	List.h	/^		Node* head_;$/;"	m	class:List
main	main.cpp	/^int main(int argc, char **argv)$/;"	f
next	List.h	/^	Node *next; \/\/ pointer portion$/;"	m	struct:Node
number	List.h	/^	int number; \/\/ data portion$/;"	m	struct:Node
operator <<	List.cpp	/^std::ostream &operator<<(std::ostream &lhs, const List &rhs)$/;"	f
operator <<	List.cpp	/^std::ostream &operator<<(std::ostream &lhs, const Node *rhs)$/;"	f
~List	List.cpp	/^List::~List(void)$/;"	f	class:List
